name: CI/CD Pipline to AWS

on:
    push:
        branches:
            - main

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest


        # Define environment variables
        env:
            AWS_REGION: ${{ secrets.AWS_REGION }}
            ECR_REPOSITORY_NAME: my-app
            ECR_REPOSITORY_NAMESPACE: devops
            ECR_REPOSITORY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAMESPACE }}/${{ secrets.ECR_REPOSITORY_NAME }}
        
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }} 
            
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            
            - name: Build and push Docker image
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest .
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest
                docker push $ECR_EGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
            
            - name: Deploy to EC2 via SSH
              uses: appleboy/ssh-action@v0.1.7
              with:
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.EC2_USER }}
                key: ${{ secrets.EC2_SSH_KEY }}
                script: |
                  echo "Deployment started..."

                  # Stop and remove the existing container if it exists
                  docker stop my-app-container || true
                  docker rm my-app-container || true

                  # Pull the latest image form ECR
                  docker pull ${{ secrets.build-image.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:latest

                  # Run a new container
                  docker run -d \
                    --name my-app-container \
                    -p 8080:8080 \
                    ${{ steps.build-image.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:latest

                  echo "Deployment finished successfully!"